buildscript {
  repositories {
    mavenCentral()
    mavenLocal()
    maven { url "https://maven.saxonica.com/maven" }
  }

  dependencies {
    classpath group: 'net.sf.saxon', name: 'Saxon-HE', version: '12.4'
  }
}

plugins {
  id 'com.nwalsh.gradle.saxon.saxon-gradle' version '0.10.7'
  id 'com.nwalsh.gradle.docker.container' version '0.0.5'
}

import com.nwalsh.gradle.saxon.SaxonXsltTask
import com.nwalsh.gradle.docker.DockerContainer

repositories {
  mavenLocal()
  mavenCentral()
  maven { url = "https://maven.apache.org" }
  maven { url "https://dev.saxonica.com/maven" }
}

ext {
  c_csrestest = "csrestest"
}

// Find dotnet
def dotnetex = null
// Laboriously construct a search path that includes some default locations
// plus the users actual path.
def spath = ["/usr/local/share/dotnet"]
System.getenv("PATH").split(System.getProperty("path.separator")).each { dir ->
  spath += [dir]
}
spath.each { dir ->
  if (dotnetex == null) {
    def fn = new File(dir + "/dotnet")
    if (fn.exists() && fn.canExecute()) {
      dotnetex = fn.toString()
    } else {
      fn = new File(dir + "/dotnet.exe")
      if (fn.exists() && fn.canExecute()) {
        dotnetex = fn.toString()
      }
    }
  }
}

if (dotnetex == null) {
  println("WARNING: Failed to find dotnet[.exe]!")
}

// You must specify the key and source externally in order to push the
// nuget package. For example, they can be read from
// ~/.gradle/gradle.properties. They must not be committed to the
// repository!
if (!hasProperty("nugetApiKey")) {
  ext.nugetApiKey = "KEYREQUIREDTOPUSH"
}
if (!hasProperty("nugetSource")) {
  ext.nugetSource = "SOURCEREQUIREDTOPUSH"
}

tasks.register('clean') {
  doLast {
    ['XmlResolver', 'XmlResolverData',
     'Tests', 'DataTests'].each { proj ->
      ['bin', 'obj'].each { dir ->
        delete "${proj}/${dir}"
      }
    }
  }
}

// ============================================================

tasks.register('copy_data', Copy) {
  into "${projectDir}/XmlResolverData/Data"
  from ("${projectDir}/data/src/data") {
    exclude "manifest.xml"
  }
}

tasks.register('make_data_catalog', SaxonXsltTask) {
  dependsOn = ['copy_data']
  input "${projectDir}/data/src/data/manifest.xml"
  output "${projectDir}/XmlResolverData/Data/catalog.xml"
  stylesheet "${projectDir}/tools/make-catalog.xsl"
}

tasks.register('make_data_tests', SaxonXsltTask) {
  dependsOn = ['copy_data']
  outputs.file "${projectDir}/DataTests/DataTest.cs"
  input "${projectDir}/data/src/data/manifest.xml"
  output "${projectDir}/XmlResolverData/Data/catalog.xml"
  stylesheet "${projectDir}/tools/make-catalog.xsl"
  parameters (
    'generate-tests': "${projectDir}/DataTests/DataTest.cs"
  )
}

tasks.register('make_data_csproj', SaxonXsltTask) {
  dependsOn = ['copy_data', 'make_data_catalog']
  input "${projectDir}/data/src/data/manifest.xml"
  output "${projectDir}/XmlResolverData/XmlResolverData.csproj"
  stylesheet "${projectDir}/tools/make-csproj.xsl"
}

// ============================================================

tasks.register('dotnetBuild') {
  dependsOn = ['dotnetBuildXmlResolver', 'dotnetBuildXmlResolverData']
}

tasks.register("dotnetBuildXmlResolver") {
  inputs.files fileTree(dir: "${projectDir}/XmlResolver")
  outputs.file "${projectDir}/XmlResolver/bin/Release/net6.0/XmlResolver.dll"
  outputs.file "${projectDir}/XmlResolver/bin/Release/XmlResolver.${resolverVersion}.nupkg"

  doLast {
    exec {
      workingDir = projectDir
      commandLine dotnetex, 'restore', 'XmlResolver.sln', '--verbosity', 'Normal'
    }
  }
  doLast {
    exec {
      workingDir = projectDir
      commandLine dotnetex, 'build', 'XmlResolver.sln', '--verbosity', 'Normal',
        '--configuration', 'Release',  '/nodereuse:false', '--no-restore',
        "-p:Version=${resolverVersion}", "-p:PackageVersion=${resolverVersion}"
    }
  }
}

tasks.register("dotnetBuildXmlResolverData") {
  dependsOn = ['make_data_csproj']
  inputs.files fileTree(dir: "${projectDir}/XmlResolverData")
  outputs.file "${projectDir}/XmlResolverData/bin/Release/net6.0/XmlResolver.dll"
  outputs.file "${projectDir}/XmlResolverData/bin/Release/XmlResolver.${resolverVersion}.nupkg"

  doLast {
    exec {
      workingDir = projectDir
      commandLine dotnetex, 'restore', 'XmlResolverData.sln', '--verbosity', 'Normal'
    }
  }
  doLast {
    exec {
      workingDir = projectDir
      commandLine dotnetex, 'build', 'XmlResolverData.sln', '--verbosity', 'Normal',
        '--configuration', 'Release',  '/nodereuse:false', '--no-restore',
        "-p:Version=${resolverVersion}", "-p:PackageVersion=${resolverVersion}"
    }
  }
}

tasks.register('dotnetTest') {
  dependsOn = ['dockerup', 'dotnetTestXmlResolver', 'dotnetTestXmlResolverData']
}

tasks.register("dotnetTestXmlResolver") {
  dependsOn ['dockerup']
  doLast {
    exec {
      workingDir = projectDir
      environment "CSHARP_XMLRESOLVER_PATH", projectDir
      commandLine dotnetex, 'test', 'XmlResolver.sln',
        '--verbosity', 'Normal', '--configuration', 'Release',
        '/p:CollectCoverage=true',
        '/p:CoverletOutputFormat=opencover',
        "/p:CoverletOutput=${buildDir}/reports/coverlet/",
        '--',
        "NUnit.TestOutputXml=${buildDir}/reports/nunit"
    }
  }
}

tasks.register("dotnetTestXmlResolverData") {
  dependsOn = ['dockerup', 'make_data_tests']
  doLast {
    exec {
      workingDir = projectDir
      environment "CSHARP_XMLRESOLVER_PATH", projectDir
      commandLine dotnetex, 'test', 'XmlResolverData.sln',
        '--verbosity', 'Normal', '--configuration', 'Release',
        '/p:CollectCoverage=true',
        '/p:CoverletOutputFormat=opencover',
        "/p:CoverletOutput=${buildDir}/reports/coverlet/",
        '--',
        "NUnit.TestOutputXml=${buildDir}/reports/nunit"
    }
  }
}

tasks.register("dotnetNugetPush") {
  dependsOn "dotnetBuild", "dotnetTest"

  inputs.files "${projectDir}/XmlResolver/bin/Release/XmlResolver.${resolverVersion}.nupkg"
  inputs.files "${projectDir}/XmlResolverData/bin/Release/XmlResolverData.${resolverVersion}.nupkg"

  doLast {
    exec {
      workingDir = projectDir
      commandLine dotnetex, "restore", "XmlResolver.sln", "--verbosity", "Normal"
    }
  }

  doLast {
    exec {
      workingDir = projectDir
      commandLine dotnetex, "nuget", "push",
        "${projectDir}/XmlResolver/bin/Release/XmlResolver.${resolverVersion}.nupkg",
        "--api-key", nugetApiKey, "--source", nugetSource
    }
  }

  doLast {
    exec {
      workingDir = projectDir
      commandLine dotnetex, "restore", "XmlResolverData.sln", "--verbosity", "Normal"
    }
  }

  doLast {
    exec {
      workingDir = projectDir
      commandLine dotnetex, "nuget", "push",
        "${projectDir}/XmlResolverData/bin/Release/XmlResolverData.${resolverVersion}.nupkg",
        "--api-key", nugetApiKey, "--source", nugetSource
    }
  }
}

// ======================================================================

docker_container.configure {
  workingDir = "docker"
}

tasks.register("dockerup") {
  description "Make sure the Docker container is running."
  doLast {
    if (!DockerContainer.running(c_csrestest)) {
      DockerContainer.compose {
        command = "up"
        options = ["-p", "xmlres"]
        args = "-d"
      }
    }
  }
  finalizedBy "dockerstatus"
}

tasks.register("dockerdown") {
  description "Make sure the Docker container is not running."
  doLast {
    if (DockerContainer.running(c_csrestest)) {
      DockerContainer.compose {
        command = "down"
        options = ["-p", "xmlres"]
      }
    }
  }
  finalizedBy "dockerstatus"
}

tasks.register("dockerstatus") {
  description "Print a short summary of running containers"
  doLast {
    if (DockerContainer.containers().isEmpty()) {
      println("There are no docker containers running.")
    } else {
      DockerContainer.docker( {
        command = "ps"
        args = ["-a", "--format={{.ID}} {{.Names}} {{.Status}}"]
      })
    }
  }
}

// ======================================================================

task dist(dependsOn: ["dockerup", "dotnetBuild"]) {
  // nop, just a place to hang dependencies
}
dist.finalizedBy "dotnetTest"
