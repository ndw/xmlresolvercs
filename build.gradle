plugins {
  id "com.itiviti.dotnet" version "1.9.2"
  id 'com.nwalsh.gradle.saxon.saxon-gradle' version '0.9.3'
  id 'com.nwalsh.gradle.docker.container' version '0.0.3'
}

import com.nwalsh.gradle.saxon.SaxonXsltTask
import com.nwalsh.gradle.docker.DockerContainer

ext {
  c_csrestest = "csrestest"
}

// Find dotnet
def dotnetex = null
// Laboriously construct a search path that includes some default locations
// plus the users actual path.
def spath = ["/usr/local/share/dotnet"]
System.getenv("PATH").split(System.getProperty("path.separator")).each { dir ->
  spath += [dir]
}
spath.each { dir ->
  if (dotnetex == null) {
    def fn = new File(dir + "/dotnet")
    if (fn.exists() && fn.canExecute()) {
      dotnetex = fn.toString()
    } else {
      fn = new File(dir + "/dotnet.exe")
      if (fn.exists() && fn.canExecute()) {
        dotnetex = fn.toString()
      }
    }
  }
}

if (dotnetex == null) {
  println("WARNING: Failed to find dotnet[.exe]!")
}

// You must specify the key and source externally in order to push the
// nuget package. For example, they can be read from
// ~/.gradle/gradle.properties. They must not be committed to the
// repository!
if (!hasProperty("nugetApiKey")) {
  ext.nugetApiKey = "KEYREQUIREDTOPUSH"
}
if (!hasProperty("nugetSource")) {
  ext.nugetSource = "SOURCEREQUIREDTOPUSH"
}

dotnet {
  dotnetExecutable = dotnetex
  solution = 'XmlResolver/XmlResolver.sln'
  configuration = 'Release'
  verbosity = 'Normal'
  projectName = 'XmlResolver'

  restore {
  }

  build {
  }  

  nugetPush {
    apiKey = nugetApiKey
    source = nugetSource
  }

  test {
    collectCoverage = true
    nunit {
      testOutputXml = file("${buildDir}/reports/nunit")
    }
  }
}

docker_container.configure {
  workingDir = "docker"
}

// ======================================================================

tasks.register("dockerup") {
  description "Make sure the Docker container is running."
  doLast {
    if (!DockerContainer.running(c_csrestest)) {
      DockerContainer.compose {
        command = "up"
        options = ["-p", "xmlres"]
        args = "-d"
      }
    }
  }
  finalizedBy "dockerstatus"
}

tasks.register("dockerdown") {
  description "Make sure the Docker container is not running."
  doLast {
    if (DockerContainer.running(c_csrestest)) {
      DockerContainer.compose {
        command = "down"
        options = ["-p", "xmlres"]
      }
    }
  }
  finalizedBy "dockerstatus"
}

tasks.register("dockerstatus") {
  description "Print a short summary of running containers"
  doLast {
    if (DockerContainer.containers().isEmpty()) {
      println("There are no docker containers running.")
    } else {
      DockerContainer.docker( {
        command = "ps"
        args = ["-a", "--format={{.ID}} {{.Names}} {{.Status}}"]
      })
    }
  }
}

// ======================================================================

task dist(type: Exec, dependsOn: ["dotnetBuild"]) {
  environment "CSHARP_XMLRESOLVER_ROOT", projectDir
  commandLine dotnetex, "test", "XmlResolver/UnitTests/UnitTests.csproj"
}
dist.dependsOn dockerup
